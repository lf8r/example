// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: generated/person/generated.service.proto

package person

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error)
	DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error)
	DeleteByIDPerson(ctx context.Context, in *DeleteByIDPersonRequest, opts ...grpc.CallOption) (*DeleteByIDPersonResponse, error)
	GetByIDPerson(ctx context.Context, in *GetByIDPersonRequest, opts ...grpc.CallOption) (*GetByIDPersonResponse, error)
	ListPerson(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*ListPersonResponse, error)
	UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*UpdatePersonResponse, error)
	PartialUpdatePerson(ctx context.Context, in *PartialUpdatePersonRequest, opts ...grpc.CallOption) (*PartialUpdatePersonResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error) {
	out := new(CreatePersonResponse)
	err := c.cc.Invoke(ctx, "/person.Service/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeletePerson(ctx context.Context, in *DeletePersonRequest, opts ...grpc.CallOption) (*DeletePersonResponse, error) {
	out := new(DeletePersonResponse)
	err := c.cc.Invoke(ctx, "/person.Service/DeletePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteByIDPerson(ctx context.Context, in *DeleteByIDPersonRequest, opts ...grpc.CallOption) (*DeleteByIDPersonResponse, error) {
	out := new(DeleteByIDPersonResponse)
	err := c.cc.Invoke(ctx, "/person.Service/DeleteByIDPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetByIDPerson(ctx context.Context, in *GetByIDPersonRequest, opts ...grpc.CallOption) (*GetByIDPersonResponse, error) {
	out := new(GetByIDPersonResponse)
	err := c.cc.Invoke(ctx, "/person.Service/GetByIDPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListPerson(ctx context.Context, in *ListPersonRequest, opts ...grpc.CallOption) (*ListPersonResponse, error) {
	out := new(ListPersonResponse)
	err := c.cc.Invoke(ctx, "/person.Service/ListPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdatePerson(ctx context.Context, in *UpdatePersonRequest, opts ...grpc.CallOption) (*UpdatePersonResponse, error) {
	out := new(UpdatePersonResponse)
	err := c.cc.Invoke(ctx, "/person.Service/UpdatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PartialUpdatePerson(ctx context.Context, in *PartialUpdatePersonRequest, opts ...grpc.CallOption) (*PartialUpdatePersonResponse, error) {
	out := new(PartialUpdatePersonResponse)
	err := c.cc.Invoke(ctx, "/person.Service/PartialUpdatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error)
	DeletePerson(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error)
	DeleteByIDPerson(context.Context, *DeleteByIDPersonRequest) (*DeleteByIDPersonResponse, error)
	GetByIDPerson(context.Context, *GetByIDPersonRequest) (*GetByIDPersonResponse, error)
	ListPerson(context.Context, *ListPersonRequest) (*ListPersonResponse, error)
	UpdatePerson(context.Context, *UpdatePersonRequest) (*UpdatePersonResponse, error)
	PartialUpdatePerson(context.Context, *PartialUpdatePersonRequest) (*PartialUpdatePersonResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedServiceServer) DeletePerson(context.Context, *DeletePersonRequest) (*DeletePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerson not implemented")
}
func (UnimplementedServiceServer) DeleteByIDPerson(context.Context, *DeleteByIDPersonRequest) (*DeleteByIDPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIDPerson not implemented")
}
func (UnimplementedServiceServer) GetByIDPerson(context.Context, *GetByIDPersonRequest) (*GetByIDPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIDPerson not implemented")
}
func (UnimplementedServiceServer) ListPerson(context.Context, *ListPersonRequest) (*ListPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPerson not implemented")
}
func (UnimplementedServiceServer) UpdatePerson(context.Context, *UpdatePersonRequest) (*UpdatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerson not implemented")
}
func (UnimplementedServiceServer) PartialUpdatePerson(context.Context, *PartialUpdatePersonRequest) (*PartialUpdatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialUpdatePerson not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Service/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeletePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeletePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Service/DeletePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeletePerson(ctx, req.(*DeletePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteByIDPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteByIDPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Service/DeleteByIDPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteByIDPerson(ctx, req.(*DeleteByIDPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetByIDPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetByIDPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Service/GetByIDPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetByIDPerson(ctx, req.(*GetByIDPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Service/ListPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListPerson(ctx, req.(*ListPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Service/UpdatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdatePerson(ctx, req.(*UpdatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PartialUpdatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartialUpdatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PartialUpdatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.Service/PartialUpdatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PartialUpdatePerson(ctx, req.(*PartialUpdatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "person.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _Service_CreatePerson_Handler,
		},
		{
			MethodName: "DeletePerson",
			Handler:    _Service_DeletePerson_Handler,
		},
		{
			MethodName: "DeleteByIDPerson",
			Handler:    _Service_DeleteByIDPerson_Handler,
		},
		{
			MethodName: "GetByIDPerson",
			Handler:    _Service_GetByIDPerson_Handler,
		},
		{
			MethodName: "ListPerson",
			Handler:    _Service_ListPerson_Handler,
		},
		{
			MethodName: "UpdatePerson",
			Handler:    _Service_UpdatePerson_Handler,
		},
		{
			MethodName: "PartialUpdatePerson",
			Handler:    _Service_PartialUpdatePerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generated/person/generated.service.proto",
}
